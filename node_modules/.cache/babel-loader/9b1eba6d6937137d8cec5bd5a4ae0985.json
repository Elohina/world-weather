{"ast":null,"code":"import _regeneratorRuntime from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Weather/Weather.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n  justify-content: center;\\n\\n  @media(max-width: 75em) {\\n    flex-direction: column;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport _ from \"lodash\";\nimport CardDetail from \"../CardDetail/CardDetail\";\nimport { fetchForecast } from \"../../api/weatherApi\";\nimport styled from \"styled-components\";\nimport Forecast from \"../Forecast/Forecast\";\nconst Container = styled.div(_templateObject());\n\nconst Weather = ({\n  lat,\n  lng,\n  address\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        forecast = _useState2[0],\n        setForecast = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedCard = _useState4[0],\n        setSelectedCard = _useState4[1];\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        selectedDay = _useState6[0],\n        setSelectedDay = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        showErrorMessage = _useState8[0],\n        setShowErrorMessage = _useState8[1];\n\n  useEffect(() => {\n    const fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result, mapped_days, weather_days;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetchForecast(lat, lng);\n\n            case 3:\n              result = _context.sent;\n              mapped_days = _.mapValues(result, element => {\n                return _objectSpread({}, element, {\n                  date_label: new Date(element.dt * 1000).getUTCDate()\n                });\n              });\n              weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n              setForecast(weather_days);\n              setSelectedCard(mapped_days[0]);\n              setSelectedDay(weather_days[mapped_days[0].date_label]);\n              setShowErrorMessage(false);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              setShowErrorMessage(true);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 12]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [lat, lng]);\n\n  const isToday = date => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  const handleOnSelectCard = (card, day) => {\n    setSelectedCard(card);\n    setSelectedDay(forecast[day]);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, showErrorMessage ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, \"Ups! We have a problem fetching the weather data. Please, try againg later.\") : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardDetail, {\n    selectedDay: selectedDay,\n    selected_card: selectedCard,\n    isToday: isToday(selectedCard.date_label),\n    address: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Forecast, {\n    forecast: forecast,\n    onChangeTime: (card, day) => {\n      handleOnSelectCard(card, day);\n    },\n    isToday: isToday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Weather/Weather.js"],"names":["React","useState","useEffect","Fragment","_","CardDetail","fetchForecast","styled","Forecast","Container","div","Weather","lat","lng","address","forecast","setForecast","selectedCard","setSelectedCard","selectedDay","setSelectedDay","showErrorMessage","setShowErrorMessage","fetchData","result","mapped_days","mapValues","element","date_label","Date","dt","getUTCDate","weather_days","groupBy","isToday","date","today","handleOnSelectCard","card","day"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport _ from \"lodash\";\nimport CardDetail from \"../CardDetail/CardDetail\";\nimport { fetchForecast } from \"../../api/weatherApi\";\nimport styled from \"styled-components\";\n\nimport Forecast from \"../Forecast/Forecast\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n\n  @media(max-width: 75em) {\n    flex-direction: column;\n  }\n`;\n\nconst Weather = ({ lat, lng, address }) => {\n  const [forecast, setForecast] = useState({});\n  const [selectedCard, setSelectedCard] = useState({});\n  const [selectedDay, setSelectedDay] = useState({});\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await fetchForecast(lat, lng);\n        const mapped_days = _.mapValues(result, (element) => {\n          return {\n            ...element,\n            date_label: new Date(element.dt * 1000).getUTCDate(),\n          };\n        });\n\n        const weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n        setForecast(weather_days);\n        setSelectedCard(mapped_days[0]);\n        setSelectedDay(weather_days[mapped_days[0].date_label]);\n        setShowErrorMessage(false);\n      } catch (error) {\n        setShowErrorMessage(true);\n      }\n\n    };\n\n    fetchData();\n  }, [lat, lng]);\n\n  const isToday = (date) => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  const handleOnSelectCard = (card, day) => {\n    setSelectedCard(card);\n    setSelectedDay(forecast[day]);\n  }\n\n  return (\n    <Container>\n      { showErrorMessage ? (<p>Ups! We have a problem fetching the weather data. Please, try againg later.</p>)\n      : (\n        <Fragment>\n          <CardDetail\n            selectedDay={selectedDay}\n            selected_card={selectedCard}\n            isToday={isToday(selectedCard.date_label)}\n            address={address}\n          />\n          <Forecast\n            forecast={forecast}\n            onChangeTime={(card, day)=>{handleOnSelectCard(card, day);}}\n            isToday={isToday}\n          />\n        </Fragment>\n      )}\n    </Container>\n  );\n};\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}