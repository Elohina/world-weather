{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Forecast/Forecast.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 50%;\\n  padding: 3em;\\n\\n  @media(max-width: 75em) {\\n    width: 100%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../Card/Card';\nimport styled from 'styled-components';\nconst StyledForecast = styled.div(_templateObject());\n\nconst Forecast = ({\n  forecast,\n  onChangeTime,\n  isToday\n}) => {\n  // const [selectedCard, setSelectedCard] = useEffect(null);\n  return /*#__PURE__*/React.createElement(StyledForecast, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Week\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Click on each day to see the details\"), Object.keys(forecast).map((day, i) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: i,\n      data: forecast[day][0],\n      onSelectCard: onChangeTime,\n      dateLabel: forecast[day][0].date_label,\n      isToday: isToday,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    });\n  }));\n};\n\nexport default Forecast;\nForecast.propTypes = {\n  forecast: PropTypes.object,\n  onChangeTime: PropTypes.func,\n  isToday: PropTypes.func\n};","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Forecast/Forecast.js"],"names":["React","useEffect","PropTypes","Card","styled","StyledForecast","div","Forecast","forecast","onChangeTime","isToday","Object","keys","map","day","i","date_label","propTypes","object","func"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAV,mBAApB;;AASA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,YAAZ;AAA0BC,EAAAA;AAA1B,CAAD,KAAyC;AACxD;AAEA,sBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,EAGIC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtC,wBACI,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,IAAI,EAAEP,QAAQ,CAACM,GAAD,CAAR,CAAc,CAAd,CAFR;AAGE,MAAA,YAAY,EAAEL,YAHhB;AAIE,MAAA,SAAS,EAAED,QAAQ,CAACM,GAAD,CAAR,CAAc,CAAd,EAAiBE,UAJ9B;AAKE,MAAA,OAAO,EAAEN,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AASD,GAVC,CAHJ,CADF;AAiBD,CApBD;;AAsBA,eAAeH,QAAf;AAEAA,QAAQ,CAACU,SAAT,GAAqB;AACnBT,EAAAA,QAAQ,EAAEN,SAAS,CAACgB,MADD;AAEnBT,EAAAA,YAAY,EAAEP,SAAS,CAACiB,IAFL;AAGnBT,EAAAA,OAAO,EAAER,SAAS,CAACiB;AAHA,CAArB","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../Card/Card';\nimport styled from 'styled-components';\n\nconst StyledForecast = styled.div`\n  width: 50%;\n  padding: 3em;\n\n  @media(max-width: 75em) {\n    width: 100%;\n  }\n`;\n\nconst Forecast = ({ forecast, onChangeTime, isToday }) => { \n  // const [selectedCard, setSelectedCard] = useEffect(null);\n\n  return (\n    <StyledForecast>\n      <h3>Week</h3>\n      <h5>Click on each day to see the details</h5>\n      { Object.keys(forecast).map((day, i) => {\n        return (\n            <Card\n              key={i}\n              data={forecast[day][0]}\n              onSelectCard={onChangeTime}\n              dateLabel={forecast[day][0].date_label}\n              isToday={isToday}\n              />\n        );\n      })}\n    </StyledForecast>\n  );\n};\n\nexport default Forecast;\n\nForecast.propTypes = {\n  forecast: PropTypes.object,\n  onChangeTime: PropTypes.func,\n  isToday: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}