{"ast":null,"code":"import _regeneratorRuntime from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Weather/Weather.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n  justify-content: center;\\n\\n  @media(max-width: 992px) {\\n    flex-direction: row;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport CardDetail from \"../CardDetail/CardDetail\";\nimport { fetchForecast } from \"../../api/weatherApi\";\nimport styled from \"styled-components\";\nimport Forecast from \"../Forecast/Forecast\";\nconst Container = styled.div(_templateObject());\n\nconst Weather = ({\n  lat,\n  lng,\n  address\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        forecast = _useState2[0],\n        setForecast = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedCard = _useState4[0],\n        setSelectedCard = _useState4[1];\n\n  useEffect(() => {\n    const fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result, mapped_days, weather_days;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetchForecast(lat, lng);\n\n            case 2:\n              result = _context.sent;\n              mapped_days = _.mapValues(result, element => {\n                return _objectSpread({}, element, {\n                  date_label: new Date(element.dt * 1000).getUTCDate()\n                });\n              });\n              weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n              setForecast(weather_days);\n              setSelectedCard(mapped_days[0]);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [lat, lng]);\n\n  const isToday = date => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardDetail, {\n    selected_card: selectedCard,\n    isToday: isToday(selectedCard.date_label),\n    address: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Forecast, {\n    forecast: forecast,\n    onChangeTime: card => setSelectedCard(card),\n    isToday: isToday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Weather/Weather.js"],"names":["React","useState","useEffect","_","CardDetail","fetchForecast","styled","Forecast","Container","div","Weather","lat","lng","address","forecast","setForecast","selectedCard","setSelectedCard","fetchData","result","mapped_days","mapValues","element","date_label","Date","dt","getUTCDate","weather_days","groupBy","isToday","date","today","card"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACG,GAAV,mBAAf;;AAUA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,GAAP;AAAYC,EAAAA;AAAZ,CAAD,KAA2B;AAAA,oBACTZ,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,QAClCa,QADkC;AAAA,QACxBC,WADwB;;AAAA,qBAEDd,QAAQ,CAAC,EAAD,CAFP;AAAA;AAAA,QAElCe,YAFkC;AAAA,QAEpBC,eAFoB;;AAIzCf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKb,aAAa,CAACM,GAAD,EAAMC,GAAN,CADlB;;AAAA;AACVO,cAAAA,MADU;AAGVC,cAAAA,WAHU,GAGIjB,CAAC,CAACkB,SAAF,CAAYF,MAAZ,EAAqBG,OAAD,IAAa;AACnD,yCACKA,OADL;AAEEC,kBAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASF,OAAO,CAACG,EAAR,GAAa,IAAtB,EAA4BC,UAA5B;AAFd;AAID,eALmB,CAHJ;AAUVC,cAAAA,YAVU,GAUKxB,CAAC,CAACkB,SAAF,CAAYlB,CAAC,CAACyB,OAAF,CAAUR,WAAV,EAAuB,YAAvB,CAAZ,CAVL;AAWhBL,cAAAA,WAAW,CAACY,YAAD,CAAX;AACAV,cAAAA,eAAe,CAACG,WAAW,CAAC,CAAD,CAAZ,CAAf;;AAZgB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATF,SAAS;AAAA;AAAA;AAAA,OAAf;;AAeAA,IAAAA,SAAS;AACV,GAjBQ,EAiBN,CAACP,GAAD,EAAMC,GAAN,CAjBM,CAAT;;AAmBA,QAAMiB,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,KAAK,GAAG,IAAIP,IAAJ,GAAWE,UAAX,EAAd;AACA,WAAOK,KAAK,KAAKD,IAAjB;AACD,GAHD;;AAKA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,aAAa,EAAEd,YADjB;AAEE,IAAA,OAAO,EAAEa,OAAO,CAACb,YAAY,CAACO,UAAd,CAFlB;AAGE,IAAA,OAAO,EAAEV,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEC,QADZ;AAEE,IAAA,YAAY,EAAGkB,IAAD,IAASf,eAAe,CAACe,IAAD,CAFxC;AAGE,IAAA,OAAO,EAAEH,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAcD,CA1CD;;AA4CA,eAAenB,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport CardDetail from \"../CardDetail/CardDetail\";\nimport { fetchForecast } from \"../../api/weatherApi\";\nimport styled from \"styled-components\";\n\nimport Forecast from \"../Forecast/Forecast\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n\n  @media(max-width: 992px) {\n    flex-direction: row;\n  }\n`;\n\nconst Weather = ({ lat, lng, address }) => {\n  const [forecast, setForecast] = useState([]);\n  const [selectedCard, setSelectedCard] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetchForecast(lat, lng);\n\n      const mapped_days = _.mapValues(result, (element) => {\n        return {\n          ...element,\n          date_label: new Date(element.dt * 1000).getUTCDate(),\n        };\n      });\n\n      const weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n      setForecast(weather_days);\n      setSelectedCard(mapped_days[0]);\n    };\n\n    fetchData();\n  }, [lat, lng]);\n\n  const isToday = (date) => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  return (\n    <Container>\n      <CardDetail\n        selected_card={selectedCard}\n        isToday={isToday(selectedCard.date_label)}\n        address={address}\n      />\n      <Forecast\n        forecast={forecast}\n        onChangeTime={(card)=>(setSelectedCard(card))}\n        isToday={isToday}\n      />\n    </Container>\n  );\n};\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}