{"ast":null,"code":"import _regeneratorRuntime from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Forecast/forecast.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 90%;\\n  padding-right: 15px;\\n  padding-left: 15px;\\n  margin-right: auto;\\n  margin-left: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../Card/card\";\nimport _ from \"lodash\";\nimport CardDetail from \"../CardDetail/card_detail\";\nimport { fetchForecast } from \"../../api/weatherApi\";\nimport styled from 'styled-components';\nconst Container = styled.div(_templateObject());\n\nconst Forecast = ({\n  lat,\n  lng,\n  address\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        forecast = _useState2[0],\n        setForecast = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedCard = _useState4[0],\n        setSelectedCard = _useState4[1];\n\n  useEffect(() => {\n    const fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result, mapped_days, weather_days;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetchForecast(lat, lng);\n\n            case 2:\n              result = _context.sent;\n              mapped_days = _.mapValues(result, element => {\n                return _objectSpread({}, element, {\n                  date_label: new Date(element.dt * 1000).getUTCDate()\n                });\n              });\n              weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n              setForecast(weather_days);\n              setSelectedCard(mapped_days[0]);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [lat, lng]);\n\n  const isToday = date => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  const changeCard = card => {\n    this.setState({\n      selected_card: card\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardDetail, {\n    selected_card: selectedCard,\n    isToday: isToday(selectedCard.date_label),\n    address: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row no-gutters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, Object.keys(forecast).map((day, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: isToday(forecast[day][0].date_label) ? \"text-primary\" : \"text-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, isToday(forecast[day][0].date_label) ? \"Today\" : new Intl.DateTimeFormat(\"en-GB\", {\n      weekday: \"short\"\n    }).format(new Date(forecast[day][0].dt_txt))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, new Intl.DateTimeFormat(\"en-GB\", {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"2-digit\"\n    }).format(new Date(forecast[day][0].dt_txt))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accordion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, forecast[day].map((element, i) => {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: i,\n        data: element,\n        onSelectCard: changeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 23\n        }\n      });\n    })));\n  })))));\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Forecast/forecast.js"],"names":["React","useState","useEffect","Card","_","CardDetail","fetchForecast","styled","Container","div","Forecast","lat","lng","address","forecast","setForecast","selectedCard","setSelectedCard","fetchData","result","mapped_days","mapValues","element","date_label","Date","dt","getUTCDate","weather_days","groupBy","isToday","date","today","changeCard","card","setState","selected_card","Object","keys","map","day","i","Intl","DateTimeFormat","weekday","format","dt_txt","month","year"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"../Card/card\";\nimport _ from \"lodash\";\nimport CardDetail from \"../CardDetail/card_detail\";\nimport { fetchForecast } from \"../../api/weatherApi\";\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 90%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nconst Forecast = ({ lat, lng, address }) => {\n  const [forecast, setForecast] = useState([]);\n  const [selectedCard, setSelectedCard] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetchForecast(lat, lng);\n\n      const mapped_days = _.mapValues(result, (element) => {\n        return {\n          ...element,\n          date_label: new Date(element.dt * 1000).getUTCDate(),\n        };\n      });\n\n      const weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n      setForecast(weather_days);\n      setSelectedCard(mapped_days[0]);\n    };\n\n    fetchData();\n  }, [lat, lng]);\n\n  const isToday = (date) => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  const changeCard = (card) => {\n    this.setState({\n      selected_card: card,\n    });\n  };\n\n  return (\n    <Container>\n    <div className=\"row\">\n      <CardDetail\n        selected_card={selectedCard}\n        isToday={isToday(selectedCard.date_label)}\n        address={address}\n      />\n      <div className=\"col-9\">\n        <div className=\"row no-gutters\">\n          {Object.keys(forecast).map((day, i) => {\n            return (\n              <div key={i} className=\"col\">\n                <h3\n                  className={\n                    isToday(forecast[day][0].date_label)\n                      ? \"text-primary\"\n                      : \"text-dark\"\n                  }\n                >\n                  {isToday(forecast[day][0].date_label)\n                    ? \"Today\"\n                    : new Intl.DateTimeFormat(\"en-GB\", {\n                        weekday: \"short\",\n                      }).format(new Date(forecast[day][0].dt_txt))}\n                </h3>\n                <h5 className=\"text-muted\">\n                  {new Intl.DateTimeFormat(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"short\",\n                    year: \"2-digit\",\n                  }).format(new Date(forecast[day][0].dt_txt))}\n                </h5>\n                <div className=\"accordion\">\n                  {forecast[day].map((element, i) => {\n                    return (\n                      <Card key={i} data={element} onSelectCard={changeCard} />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n    </Container>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}