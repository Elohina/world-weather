{"ast":null,"code":"import _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Searchbar/Searchbar.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  padding: 2rem;\\n  width: 50rem;\\n  height: 3rem;\\n  font-size: 2rem;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport styled from 'styled-components';\nconst Input = styled.input(_templateObject());\nexport default function Searchbar({\n  address: initialAddress,\n  onSubmit\n}) {\n  const _useState = useState(initialAddress),\n        _useState2 = _slicedToArray(_useState, 2),\n        address = _useState2[0],\n        setAddress = _useState2[1];\n\n  const handleSelect = address => {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => onSubmit(latLng, address)).catch(error => console.error(\"Error\", error));\n    setAddress(address);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: address => setAddress(address),\n    onSelect: address => handleSelect(address),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, Object.assign({}, getInputProps({\n    placeholder: \"Your city\"\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    style: {\n      position: 'absolute',\n      boxShadow: '10px 10px 17px 0px rgba(0,0,0,0.75)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 27\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\";\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\",\n      paddingLeft: '2rem',\n      fontSize: '2rem'\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\",\n      paddingLeft: '2rem',\n      fontSize: '2rem'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, suggestion.description));\n  })))));\n}\nSearchbar.defaultProps = {\n  address: \"\"\n};","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Searchbar/Searchbar.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","styled","Input","input","Searchbar","address","initialAddress","onSubmit","setAddress","handleSelect","then","results","latLng","catch","error","console","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","position","boxShadow","map","suggestion","className","active","style","backgroundColor","cursor","paddingLeft","fontSize","description","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  padding: 2rem;\n  width: 50rem;\n  height: 3rem;\n  font-size: 2rem;\n`;\n\nexport default function Searchbar({ address: initialAddress, onSubmit }) {\n  const [address, setAddress] = useState(initialAddress);\n\n  const handleSelect = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => onSubmit(latLng, address))\n      .catch((error) => console.error(\"Error\", error));\n    setAddress(address);\n  };\n\n  return (\n    <form>\n      <PlacesAutocomplete\n        value={address}\n        onChange={(address) => setAddress(address)}\n        onSelect={(address) => handleSelect(address)}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <Input\n              {...getInputProps({\n                placeholder: \"Your city\",\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\" style={{position: 'absolute', boxShadow: '10px 10px 17px 0px rgba(0,0,0,0.75)'}}>\n              {loading && <div>Loading...</div>}\n              {suggestions.map((suggestion) => {\n                const className = suggestion.active\n                  ? \"suggestion-item--active\"\n                  : \"suggestion-item\";\n                const style = suggestion.active\n                  ? { backgroundColor: \"#fafafa\", cursor: \"pointer\", paddingLeft: '2rem', fontSize: '2rem'}\n                  : { backgroundColor: \"#ffffff\", cursor: \"pointer\", paddingLeft: '2rem', fontSize: '2rem' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    </form>\n  );\n}\n\nSearchbar.defaultProps = {\n  address: \"\",\n};\n"]},"metadata":{},"sourceType":"module"}