{"ast":null,"code":"import _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Forecast/Forecast.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 50%;\\n  padding: 3em;\\n\\n  @media(max-width: 75em) {\\n    width: 100%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../Card/Card';\nimport styled from 'styled-components';\nconst StyledForecast = styled.div(_templateObject());\n\nconst Forecast = ({\n  forecast,\n  onChangeTime,\n  isToday,\n  selectedDay\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedCard = _useState2[0],\n        setSelectedCard = _useState2[1];\n\n  useEffect(() => {\n    if (selectedDay[0]) {\n      setSelectedCard(selectedDay[0].date_label);\n    }\n  }, [selectedDay]);\n\n  const _onSelectCard = (data, dateLabel) => {\n    onChangeTime(data, dateLabel);\n    setSelectedCard(dateLabel);\n  };\n\n  return /*#__PURE__*/React.createElement(StyledForecast, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Week\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Click on each day to see the details\"), Object.keys(forecast).map((day, i) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: i,\n      data: forecast[day][0],\n      onSelectCard: (data, dateLabel) => _onSelectCard(data, dateLabel),\n      dateLabel: forecast[day][0].date_label,\n      isToday: isToday,\n      isSelected: selectedCard === forecast[day][0].date_label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport default Forecast;\nForecast.propTypes = {\n  forecast: PropTypes.object,\n  onChangeTime: PropTypes.func,\n  isToday: PropTypes.func\n};","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Forecast/Forecast.js"],"names":["React","useState","useEffect","PropTypes","Card","styled","StyledForecast","div","Forecast","forecast","onChangeTime","isToday","selectedDay","selectedCard","setSelectedCard","date_label","onSelectCard","data","dateLabel","Object","keys","map","day","i","propTypes","object","func"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAV,mBAApB;;AASA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,YAAZ;AAA0BC,EAAAA,OAA1B;AAAmCC,EAAAA;AAAnC,CAAD,KAAsD;AAAA,oBAC7BX,QAAQ,CAAC,IAAD,CADqB;AAAA;AAAA,QAC9DY,YAD8D;AAAA,QAChDC,eADgD;;AAGrEZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAW,CAAC,CAAD,CAAf,EAAoB;AAClBE,MAAAA,eAAe,CAACF,WAAW,CAAC,CAAD,CAAX,CAAeG,UAAhB,CAAf;AACD;AACF,GAJQ,EAIN,CAACH,WAAD,CAJM,CAAT;;AAMA,QAAMI,aAAY,GAAG,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACxCR,IAAAA,YAAY,CAACO,IAAD,EAAOC,SAAP,CAAZ;AACAJ,IAAAA,eAAe,CAACI,SAAD,CAAf;AACD,GAHD;;AAKA,sBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,EAGIC,MAAM,CAACC,IAAP,CAAYX,QAAZ,EAAsBY,GAAtB,CAA0B,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtC,wBACE,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,IAAI,EAAEd,QAAQ,CAACa,GAAD,CAAR,CAAc,CAAd,CAFR;AAGE,MAAA,YAAY,EAAE,CAACL,IAAD,EAAOC,SAAP,KAAsBF,aAAY,CAACC,IAAD,EAAOC,SAAP,CAHlD;AAIE,MAAA,SAAS,EAAET,QAAQ,CAACa,GAAD,CAAR,CAAc,CAAd,EAAiBP,UAJ9B;AAKE,MAAA,OAAO,EAAEJ,OALX;AAME,MAAA,UAAU,EAAEE,YAAY,KAAKJ,QAAQ,CAACa,GAAD,CAAR,CAAc,CAAd,EAAiBP,UANhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXC,CAHJ,CADF;AAkBD,CAhCD;;AAkCA,eAAeP,QAAf;AAEAA,QAAQ,CAACgB,SAAT,GAAqB;AACnBf,EAAAA,QAAQ,EAAEN,SAAS,CAACsB,MADD;AAEnBf,EAAAA,YAAY,EAAEP,SAAS,CAACuB,IAFL;AAGnBf,EAAAA,OAAO,EAAER,SAAS,CAACuB;AAHA,CAArB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../Card/Card';\nimport styled from 'styled-components';\n\nconst StyledForecast = styled.div`\n  width: 50%;\n  padding: 3em;\n\n  @media(max-width: 75em) {\n    width: 100%;\n  }\n`;\n\nconst Forecast = ({ forecast, onChangeTime, isToday, selectedDay }) => { \n  const [selectedCard, setSelectedCard] = useState(null);\n\n  useEffect(() => {\n    if (selectedDay[0]) {\n      setSelectedCard(selectedDay[0].date_label);\n    }\n  }, [selectedDay]);\n\n  const onSelectCard = (data, dateLabel) => {\n    onChangeTime(data, dateLabel);\n    setSelectedCard(dateLabel);\n  }\n\n  return (\n    <StyledForecast>\n      <h3>Week</h3>\n      <h5>Click on each day to see the details</h5>\n      { Object.keys(forecast).map((day, i) => {\n        return (\n          <Card\n            key={i}\n            data={forecast[day][0]}\n            onSelectCard={(data, dateLabel) => (onSelectCard(data, dateLabel))}\n            dateLabel={forecast[day][0].date_label}\n            isToday={isToday}\n            isSelected={selectedCard === forecast[day][0].date_label}\n          />\n        );\n      })}\n    </StyledForecast>\n  );\n};\n\nexport default Forecast;\n\nForecast.propTypes = {\n  forecast: PropTypes.object,\n  onChangeTime: PropTypes.func,\n  isToday: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}