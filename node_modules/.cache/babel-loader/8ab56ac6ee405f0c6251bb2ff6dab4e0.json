{"ast":null,"code":"import _regeneratorRuntime from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Forecast/forecast.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Card from \"../Card/card\";\nimport _ from \"lodash\";\nimport CardDetail from '../CardDetail/card_detail';\nconst API_URL = \"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&units=metric&APPID=aaaa0d9df7ab5eac79e26cf42b2e3fe9\";\n\nconst Forecast = ({\n  lat,\n  lng,\n  address\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        forecast = _useState2[0],\n        setForecast = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedCard = _useState4[0],\n        setSelectedCard = _useState4[1];\n\n  useEffect(() => {\n    const fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result, forecast, mapped_days, weather_days;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get(\"\\n                https://api.openweathermap.org/data/2.5/forecast?lat=\".concat(lat, \"&lon=\").concat(lng, \"&units=metric&APPID=aaaa0d9df7ab5eac79e26cf42b2e3fe9\\n            \"));\n\n            case 2:\n              result = _context.sent;\n              forecast = result.data.list;\n              mapped_days = _.mapValues(forecast, element => {\n                return _objectSpread({}, element, {\n                  date_label: new Date(element.dt * 1000).getUTCDate()\n                });\n              });\n              weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n              setForecast(weather_days);\n              setSelectedCard(mapped_days[0]);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, []);\n\n  const isToday = date => {\n    const today = new Date().getUTCDate();\n    return today === date;\n  };\n\n  const changeCard = card => {\n    this.setState({\n      selected_card: card\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardDetail, {\n    selected_card: selectedCard,\n    isToday: isToday(selectedCard.date_label),\n    address: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row no-gutters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, Object.keys(forecast).map((day, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: isToday(forecast[day][0].date_label) ? 'text-primary' : 'text-dark',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 33\n      }\n    }, isToday(forecast[day][0].date_label) ? 'Today' : new Intl.DateTimeFormat('en-GB', {\n      weekday: 'short'\n    }).format(new Date(forecast[day][0].dt_txt))), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }\n    }, new Intl.DateTimeFormat('en-GB', {\n      day: 'numeric',\n      month: 'short',\n      year: '2-digit'\n    }).format(new Date(forecast[day][0].dt_txt))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accordion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 33\n      }\n    }, forecast[day].map((element, i) => {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: i,\n        data: element,\n        onSelectCard: changeCard,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 45\n        }\n      });\n    })));\n  }))));\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Forecast/forecast.js"],"names":["React","useState","useEffect","axios","Card","_","CardDetail","API_URL","Forecast","lat","lng","address","forecast","setForecast","selectedCard","setSelectedCard","fetchData","get","result","data","list","mapped_days","mapValues","element","date_label","Date","dt","getUTCDate","weather_days","groupBy","isToday","date","today","changeCard","card","setState","selected_card","Object","keys","map","day","i","Intl","DateTimeFormat","weekday","format","dt_txt","month","year"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport  Card from \"../Card/card\";\nimport _ from \"lodash\";\nimport CardDetail from '../CardDetail/card_detail';\n\nconst API_URL = \"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&units=metric&APPID=aaaa0d9df7ab5eac79e26cf42b2e3fe9\";\n\nconst Forecast = ({lat, lng, address}) => {\n    const [forecast, setForecast] = useState([]);\n    const [selectedCard, setSelectedCard] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios.get(`\n                https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&units=metric&APPID=aaaa0d9df7ab5eac79e26cf42b2e3fe9\n            `);\n\n            const forecast = result.data.list;\n            const mapped_days = _.mapValues(forecast, element => {\n                return {...element, date_label: new Date(element.dt * 1000).getUTCDate()};\n            });\n\n            const weather_days = _.mapValues(_.groupBy(mapped_days, \"date_label\"));\n            setForecast(weather_days);\n            setSelectedCard(mapped_days[0]);\n        };\n\n        fetchData();\n    }, []);\n\n    const isToday = date => {\n        const today = new Date().getUTCDate();\n        return today === date;\n    }\n\n    const changeCard = card => {\n        this.setState({\n            selected_card: card\n        });\n    }\n\n    return(\n        <div className=\"row\">\n            <CardDetail selected_card={selectedCard} isToday={isToday(selectedCard.date_label)} address={address}/>\n            <div className=\"col-9\">\n                <div className=\"row no-gutters\">\n                    {Object.keys(forecast).map((day, i) => {\n                        return (\n                            <div key={i} className=\"col\">\n                                <h3 className={ isToday(forecast[day][0].date_label)  ? 'text-primary' : 'text-dark'}>\n                                    {\n                                        isToday(forecast[day][0].date_label) ? 'Today' :\n                                        new Intl.DateTimeFormat('en-GB', {\n                                            weekday: 'short'\n                                        })\n                                        .format(new Date(forecast[day][0].dt_txt))\n                                    }\n                                </h3>\n                                <h5 className=\"text-muted\">{new Intl.DateTimeFormat('en-GB', {\n                                    day: 'numeric',\n                                    month: 'short',\n                                    year: '2-digit'\n                                }).format(new Date(forecast[day][0].dt_txt))}</h5>\n                                <div className=\"accordion\">\n                                    {forecast[day].map((element, i) => {\n                                        return(\n                                            <Card key={i} data={element} onSelectCard={changeCard}/>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}