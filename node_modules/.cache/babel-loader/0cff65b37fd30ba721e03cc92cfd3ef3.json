{"ast":null,"code":"import _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Searchbar/Searchbar.js\";\nimport React, { useState } from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nexport default function Searchbar({\n  address: initialAddress,\n  onSubmit\n}) {\n  const _useState = useState(initialAddress),\n        _useState2 = _slicedToArray(_useState, 2),\n        address = _useState2[0],\n        setAddress = _useState2[1];\n\n  const handleSelect = address => {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => onSubmit(latLng, address)).catch(error => console.error(\"Error\", error));\n  };\n\n  return /*#__PURE__*/React.createElement(\"header\", {\n    style: {\n      position: \"relative\",\n      height: \"4em\",\n      paddingLeft: \"4.5em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: address => setAddress(address),\n    onSelect: address => handleSelect(address),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    style: {\n      width: \"20em\"\n    }\n  }, getInputProps({\n    placeholder: \"Your city\",\n    className: \"location-search-input\"\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 27\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\"\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, suggestion.description));\n  })))));\n}\nSearchbar.defaultProps = {\n  address: \"\"\n};","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Searchbar/Searchbar.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Searchbar","address","initialAddress","onSubmit","setAddress","handleSelect","then","results","latLng","catch","error","console","position","height","paddingLeft","getInputProps","suggestions","getSuggestionItemProps","loading","width","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAKA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,OAAO,EAAEC,cAAX;AAA2BC,EAAAA;AAA3B,CAAnB,EAA0D;AAAA,oBACzCP,QAAQ,CAACM,cAAD,CADiC;AAAA;AAAA,QAChED,OADgE;AAAA,QACvDG,UADuD;;AAGvE,QAAMC,YAAY,GAAIJ,OAAD,IAAa;AAChCH,IAAAA,gBAAgB,CAACG,OAAD,CAAhB,CACGK,IADH,CACSC,OAAD,IAAaR,SAAS,CAACQ,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEGD,IAFH,CAESE,MAAD,IAAYL,QAAQ,CAACK,MAAD,EAASP,OAAT,CAF5B,EAGGQ,KAHH,CAGUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHpB;AAID,GALD;;AAOA,sBACE;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,MAAM,EAAE,KAFH;AAGLC,MAAAA,WAAW,EAAE;AAHR,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAEb,OADT;AAEE,IAAA,QAAQ,EAAGA,OAAD,IAAaG,UAAU,CAACH,OAAD,CAFnC;AAGE,IAAA,QAAQ,EAAGA,OAAD,IAAaI,YAAY,CAACJ,OAAD,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AAAEc,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AADT,KAEMJ,aAAa,CAAC;AAChBK,IAAAA,WAAW,EAAE,WADG;AAEhBC,IAAAA,SAAS,EAAE;AAFK,GAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAQE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGF,WAAW,CAACM,GAAZ,CAAiBC,UAAD,IAAgB;AAC/B,UAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD+B,CAI/B;;AACA,UAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACV;AAAEE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KADU,GAEV;AAAED,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAFJ;AAGA,wBACE,6CACMV,sBAAsB,CAACM,UAAD,EAAa;AACrCF,MAAAA,SADqC;AAErCI,MAAAA;AAFqC,KAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOF,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,GAlBA,CAFH,CARF,CANJ,CAPF,CADF;AAiDD;AAED5B,SAAS,CAAC6B,YAAV,GAAyB;AACvB5B,EAAAA,OAAO,EAAE;AADc,CAAzB","sourcesContent":["import React, { useState } from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nexport default function Searchbar({ address: initialAddress, onSubmit }) {\n  const [address, setAddress] = useState(initialAddress);\n\n  const handleSelect = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => onSubmit(latLng, address))\n      .catch((error) => console.error(\"Error\", error));\n  };\n\n  return (\n    <header\n      style={{\n        position: \"relative\",\n        height: \"4em\",\n        paddingLeft: \"4.5em\",\n      }}\n    >\n      <PlacesAutocomplete\n        value={address}\n        onChange={(address) => setAddress(address)}\n        onSelect={(address) => handleSelect(address)}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              style={{ width: \"20em\" }}\n              {...getInputProps({\n                placeholder: \"Your city\",\n                className: \"location-search-input\",\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map((suggestion) => {\n                const className = suggestion.active\n                  ? \"suggestion-item--active\"\n                  : \"suggestion-item\";\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                  : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    </header>\n  );\n}\n\nSearchbar.defaultProps = {\n  address: \"\",\n};\n"]},"metadata":{},"sourceType":"module"}