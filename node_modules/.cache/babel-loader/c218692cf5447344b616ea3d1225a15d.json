{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Forecast/Forecast.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  color: #6c757d;\\n  font-size: 1.25rem;\\n  margin-bottom: .5rem;\\n  font-family: inherit;\\n  font-weight: 500;\\n  line-height: 1.2;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  color: #343a40;\\n  font-size: 1.75rem;\\n  margin-bottom: .5rem;\\n  font-family: inherit;\\n  font-weight: 500;\\n  line-height: 1.2;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment } from \"react\";\nimport Card from \"../Card/Card\";\nimport styled from 'styled-components';\nconst WeekdayText = styled.h3(_templateObject());\nconst DateText = styled.h5(_templateObject2());\n\nconst Forecast = ({\n  forecast,\n  onChangeTime,\n  isToday\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, Object.keys(forecast).map((day, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(WeekdayText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, isToday(forecast[day][0].date_label) ? \"Today\" : new Intl.DateTimeFormat(\"en-GB\", {\n      weekday: \"long\"\n    }).format(new Date(forecast[day][0].dt_txt))), /*#__PURE__*/React.createElement(DateText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, new Intl.DateTimeFormat(\"en-GB\", {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"2-digit\"\n    }).format(new Date(forecast[day][0].dt_txt))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      key: i,\n      data: forecast[day][0],\n      onSelectCard: onChangeTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    })));\n  }));\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Forecast/Forecast.js"],"names":["React","Fragment","Card","styled","WeekdayText","h3","DateText","h5","Forecast","forecast","onChangeTime","isToday","Object","keys","map","day","i","date_label","Intl","DateTimeFormat","weekday","format","Date","dt_txt","month","year"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,WAAW,GAAGD,MAAM,CAACE,EAAV,mBAAjB;AASA,MAAMC,QAAQ,GAAGH,MAAM,CAACI,EAAV,oBAAd;;AASA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,YAAZ;AAA0BC,EAAAA;AAA1B,CAAD,KAAyC;AACxD,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,CAACC,GAAD,EAAMC,CAAN,KAAY;AACrC,wBACE;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIL,OAAO,CAACF,QAAQ,CAACM,GAAD,CAAR,CAAc,CAAd,EAAiBE,UAAlB,CAAP,GACA,OADA,GAGA,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AAC/BC,MAAAA,OAAO,EAAE;AADsB,KAAjC,EAEGC,MAFH,CAEU,IAAIC,IAAJ,CAASb,QAAQ,CAACM,GAAD,CAAR,CAAc,CAAd,EAAiBQ,MAA1B,CAFV,CAJJ,CAFJ,eAWI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,IAAIL,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AAChCJ,MAAAA,GAAG,EAAE,SAD2B;AAEhCS,MAAAA,KAAK,EAAE,OAFyB;AAGhCC,MAAAA,IAAI,EAAE;AAH0B,KAAjC,EAIEJ,MAJF,CAIS,IAAIC,IAAJ,CAASb,QAAQ,CAACM,GAAD,CAAR,CAAc,CAAd,EAAiBQ,MAA1B,CAJT,CADH,CAXJ,eAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEP,CAAX;AAAc,MAAA,IAAI,EAAEP,QAAQ,CAACM,GAAD,CAAR,CAAc,CAAd,CAApB;AAAsC,MAAA,YAAY,EAAEL,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAnBJ,CADF;AA8BD,GA/BA,CADH,CADF;AAoCD,CArCD;;AAuCA,eAAeF,QAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport Card from \"../Card/Card\";\nimport styled from 'styled-components';\n\nconst WeekdayText = styled.h3`\n  color: #343a40;\n  font-size: 1.75rem;\n  margin-bottom: .5rem;\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.2;\n`;\n\nconst DateText = styled.h5`\n  color: #6c757d;\n  font-size: 1.25rem;\n  margin-bottom: .5rem;\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.2;\n`;\n\nconst Forecast = ({ forecast, onChangeTime, isToday }) => { \n  return (\n    <div>\n      {Object.keys(forecast).map((day, i) => {\n        return (\n          <div key={i}>\n\n              <WeekdayText>\n                { isToday(forecast[day][0].date_label) ?\n                  \"Today\" :\n\n                  new Intl.DateTimeFormat(\"en-GB\", {\n                    weekday: \"long\",\n                  }).format(new Date(forecast[day][0].dt_txt))\n                }\n              </WeekdayText>\n              <DateText>\n                {new Intl.DateTimeFormat(\"en-GB\", {\n                  day: \"numeric\",\n                  month: \"short\",\n                  year: \"2-digit\",\n                }).format(new Date(forecast[day][0].dt_txt))}\n              </DateText>\n\n              <div>\n                {/* {forecast[day].map((element, i) => {\n                  return (\n                    <Card key={i} data={element} onSelectCard={onChangeTime} />\n                  );\n                })} */}\n                <Card key={i} data={forecast[day][0]} onSelectCard={onChangeTime} />\n              </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}