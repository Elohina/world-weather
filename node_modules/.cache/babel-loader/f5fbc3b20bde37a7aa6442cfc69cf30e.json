{"ast":null,"code":"import _slicedToArray from \"/Users/el20064544/projects/dublin-weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/el20064544/projects/dublin-weather/src/components/Searchbar/searchbar.js\";\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nexport default function Searchbar({\n  address: initialAddress,\n  onSubmit\n}) {\n  const _useState = useState(initialAddress),\n        _useState2 = _slicedToArray(_useState, 2),\n        address = _useState2[0],\n        setAddress = _useState2[1];\n\n  const handleSelect = address => {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => onSubmit(latLng, address)).catch(error => console.error('Error', error));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      height: '4em',\n      width: '100%',\n      paddingLeft: '4.5em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: address => setAddress(address),\n    onSelect: address => handleSelect(address),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    style: {\n      width: '20em'\n    }\n  }, getInputProps({\n    placeholder: 'Your city',\n    className: 'location-search-input'\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 25\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 37\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: '#fafafa',\n      cursor: 'pointer'\n    } : {\n      backgroundColor: '#ffffff',\n      cursor: 'pointer'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 33\n      }\n    }, suggestion.description));\n  })))));\n}\n;\nSearchbar.defaultProps = {\n  address: \"\"\n};","map":{"version":3,"sources":["/Users/el20064544/projects/dublin-weather/src/components/Searchbar/searchbar.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Searchbar","address","initialAddress","onSubmit","setAddress","handleSelect","then","results","latLng","catch","error","console","position","height","width","paddingLeft","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,kBAAP,IACIC,gBADJ,EAEIC,SAFJ,QAGS,2BAHT;AAKA,eAAe,SAASC,SAAT,CAAmB;AAACC,EAAAA,OAAO,EAAEC,cAAV;AAA0BC,EAAAA;AAA1B,CAAnB,EAAwD;AAAA,oBACrCP,QAAQ,CAACM,cAAD,CAD6B;AAAA;AAAA,QAC5DD,OAD4D;AAAA,QACnDG,UADmD;;AAGnE,QAAMC,YAAY,GAAGJ,OAAO,IAAI;AAC5BH,IAAAA,gBAAgB,CAACG,OAAD,CAAhB,CACGK,IADH,CACQC,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQE,MAAM,IAAIL,QAAQ,CAACK,MAAD,EAASP,OAAT,CAF1B,EAGGQ,KAHH,CAGSC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHlB;AAIH,GALD;;AAOA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE,KAAhC;AAAuCC,MAAAA,KAAK,EAAE,MAA9C;AAAsDC,MAAAA,WAAW,EAAE;AAAnE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,kBAAD;AACI,IAAA,KAAK,EAAEd,OADX;AAEI,IAAA,QAAQ,EAAEA,OAAO,IAAIG,UAAU,CAACH,OAAD,CAFnC;AAGI,IAAA,QAAQ,EAAEA,OAAO,IAAEI,YAAY,CAACJ,OAAD,CAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKK,CAAC;AAAEe,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACA,IAAA,KAAK,EAAE;AAACL,MAAAA,KAAK,EAAE;AAAR;AADP,KAEIE,aAAa,CAAC;AACdI,IAAAA,WAAW,EAAE,WADC;AAEdC,IAAAA,SAAS,EAAE;AAFG,GAAD,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,eAQI;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCF,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADZ,EAECF,WAAW,CAACK,GAAZ,CAAgBC,UAAU,IAAI;AAC3B,UAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GAChB,yBADgB,GAEhB,iBAFF,CAD2B,CAI3B;;AACA,UAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACZ;AAAEE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KADY,GAEZ;AAAED,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAFF;AAGA,wBACA,6CACQT,sBAAsB,CAACK,UAAD,EAAa;AACvCF,MAAAA,SADuC;AAEvCI,MAAAA;AAFuC,KAAb,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOF,UAAU,CAACK,WAAlB,CANJ,CADA;AAUH,GAlBA,CAFD,CARJ,CANR,CADJ,CADJ;AA2CH;AAAA;AAED5B,SAAS,CAAC6B,YAAV,GAAyB;AACrB5B,EAAAA,OAAO,EAAE;AADY,CAAzB","sourcesContent":["import React, {useState} from 'react';\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng\n  } from 'react-places-autocomplete';\n\nexport default function Searchbar({address: initialAddress, onSubmit}) {\n    const [address, setAddress] = useState(initialAddress);\n\n    const handleSelect = address => {\n        geocodeByAddress(address)\n          .then(results => getLatLng(results[0]))\n          .then(latLng => onSubmit(latLng, address))\n          .catch(error => console.error('Error', error));\n    };\n\n    return(\n        <div style={{ position: 'relative', height: '4em', width: '100%', paddingLeft: '4.5em'}}>\n            <PlacesAutocomplete\n                value={address}\n                onChange={address => setAddress(address)}\n                onSelect={address=>handleSelect(address)}\n            >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                        <input\n                        style={{width: '20em'}}\n                        {...getInputProps({\n                            placeholder: 'Your city',\n                            className: 'location-search-input',\n                        })}\n                        />\n                        <div className=\"autocomplete-dropdown-container\">\n                        {loading && <div>Loading...</div>}\n                        {suggestions.map(suggestion => {\n                            const className = suggestion.active\n                            ? 'suggestion-item--active'\n                            : 'suggestion-item';\n                            // inline style for demonstration purpose\n                            const style = suggestion.active\n                            ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                            : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                            return (\n                            <div\n                                {...getSuggestionItemProps(suggestion, {\n                                className,\n                                style,\n                                })}\n                            >\n                                <span>{suggestion.description}</span>\n                            </div>\n                            );\n                        })}\n                        </div>\n                    </div>\n                )}\n            </PlacesAutocomplete>\n        </div>\n    )\n};\n\nSearchbar.defaultProps = {\n    address: \"\"\n};"]},"metadata":{},"sourceType":"module"}